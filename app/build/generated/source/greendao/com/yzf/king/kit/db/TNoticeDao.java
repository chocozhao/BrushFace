package com.yzf.king.kit.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TNOTICE".
*/
public class TNoticeDao extends AbstractDao<TNotice, Long> {

    public static final String TABLENAME = "TNOTICE";

    /**
     * Properties of entity TNotice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Amt = new Property(1, int.class, "amt", false, "AMT");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property MerchId = new Property(3, String.class, "merchId", false, "MERCH_ID");
        public final static Property NoticeId = new Property(4, int.class, "noticeId", false, "NOTICE_ID");
        public final static Property OrderId = new Property(5, String.class, "orderId", false, "ORDER_ID");
        public final static Property ReadFlag = new Property(6, int.class, "readFlag", false, "READ_FLAG");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property ShowFlag = new Property(8, int.class, "showFlag", false, "SHOW_FLAG");
        public final static Property Status = new Property(9, int.class, "status", false, "STATUS");
        public final static Property Time = new Property(10, String.class, "time", false, "TIME");
        public final static Property Title = new Property(11, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(12, int.class, "type", false, "TYPE");
        public final static Property Url = new Property(13, String.class, "url", false, "URL");
    }


    public TNoticeDao(DaoConfig config) {
        super(config);
    }
    
    public TNoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TNOTICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AMT\" INTEGER NOT NULL ," + // 1: amt
                "\"CONTENT\" TEXT," + // 2: content
                "\"MERCH_ID\" TEXT," + // 3: merchId
                "\"NOTICE_ID\" INTEGER NOT NULL ," + // 4: noticeId
                "\"ORDER_ID\" TEXT," + // 5: orderId
                "\"READ_FLAG\" INTEGER NOT NULL ," + // 6: readFlag
                "\"REMARK\" TEXT," + // 7: remark
                "\"SHOW_FLAG\" INTEGER NOT NULL ," + // 8: showFlag
                "\"STATUS\" INTEGER NOT NULL ," + // 9: status
                "\"TIME\" TEXT," + // 10: time
                "\"TITLE\" TEXT," + // 11: title
                "\"TYPE\" INTEGER NOT NULL ," + // 12: type
                "\"URL\" TEXT);"); // 13: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TNOTICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TNotice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAmt());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String merchId = entity.getMerchId();
        if (merchId != null) {
            stmt.bindString(4, merchId);
        }
        stmt.bindLong(5, entity.getNoticeId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(6, orderId);
        }
        stmt.bindLong(7, entity.getReadFlag());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getShowFlag());
        stmt.bindLong(10, entity.getStatus());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(11, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
        stmt.bindLong(13, entity.getType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(14, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TNotice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAmt());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String merchId = entity.getMerchId();
        if (merchId != null) {
            stmt.bindString(4, merchId);
        }
        stmt.bindLong(5, entity.getNoticeId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(6, orderId);
        }
        stmt.bindLong(7, entity.getReadFlag());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
        stmt.bindLong(9, entity.getShowFlag());
        stmt.bindLong(10, entity.getStatus());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(11, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(12, title);
        }
        stmt.bindLong(13, entity.getType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(14, url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TNotice readEntity(Cursor cursor, int offset) {
        TNotice entity = new TNotice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // amt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // merchId
            cursor.getInt(offset + 4), // noticeId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orderId
            cursor.getInt(offset + 6), // readFlag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.getInt(offset + 8), // showFlag
            cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // title
            cursor.getInt(offset + 12), // type
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TNotice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAmt(cursor.getInt(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMerchId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNoticeId(cursor.getInt(offset + 4));
        entity.setOrderId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReadFlag(cursor.getInt(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShowFlag(cursor.getInt(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTitle(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType(cursor.getInt(offset + 12));
        entity.setUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TNotice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TNotice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TNotice entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
